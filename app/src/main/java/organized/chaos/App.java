package organized.chaos;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JFileChooser;
import java.awt.Graphics2D;
import java.util.Vector;
import java.awt.Graphics;
import java.awt.BasicStroke;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import javax.swing.ComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.SpinnerNumberModel;
/**
 *
 * @author Andres
 */
public class App extends javax.swing.JFrame {
    
    private StoreGraph graph;
    private File dataFile;
    private File selectedFile;
    private String[] products;
    private Integer[] amountProducts;
    private RouteList newRoutes;
    
    /**
     * Creates new form App
     */
    public App() {
        initComponents();
        this.products=null;
        this.amountProducts=null;
        this.newRoutes=null;
    }
    

    public StoreGraph getGraph() {
        return graph;
    }

    public void setGraph(StoreGraph graph) {
        this.graph = graph;
    }

    public File getDataFile() {
        return dataFile;
    }

    public void setDataFile(File dataFile) {
        this.dataFile = dataFile;
    }
    
    public void loadFile(File file) {
        try {
            graph = Database.readDatabase(file);
            dataFile = file;
            JOptionPane.showMessageDialog(this, "El archivo contiene %d almacenes".formatted(graph.getStores().getSize()), "Archivo cargado", JOptionPane.INFORMATION_MESSAGE);
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "No se encontró el archivo", "Archivo no encontrado", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "No se pudo leer el archivo", "Error de lectura", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Hubo un problema al leer el archivo", "Error de formato", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        fileChooser = new javax.swing.JFileChooser();
        jLabel7 = new javax.swing.JLabel();
        logoPanel = new javax.swing.JPanel();
        ParentPanel = new javax.swing.JPanel();
        LoadPanel = new javax.swing.JPanel();
        chooseButton = new javax.swing.JButton();
        tittle1 = new javax.swing.JLabel();
        loadButton = new javax.swing.JButton();
        tittle2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        optionsPanel = new javax.swing.JPanel();
        updateData = new javax.swing.JButton();
        disponibilidadShow = new javax.swing.JButton();
        addStore = new javax.swing.JButton();
        pedidoBoton = new javax.swing.JButton();
        addRouteButton = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        disponibilidadPanel = new javax.swing.JPanel();
        pedidoPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        productosInput = new javax.swing.JTextArea();
        JCStores = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        confirmRequest = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        JCProducts = new javax.swing.JComboBox<>();
        JProductsAmount = new javax.swing.JSpinner();
        addproduct = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        userList = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        addStorePanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        nameStoreInput = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        route3 = new javax.swing.JSpinner();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jSpinner2 = new javax.swing.JSpinner();
        jSpinner3 = new javax.swing.JSpinner();
        createStoreButton = new javax.swing.JButton();
        addConection = new javax.swing.JButton();
        JConectionStore = new javax.swing.JComboBox<>();
        JConectionStore2 = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        JConectionMore = new javax.swing.JComboBox<>();
        addRoute = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        storeAddRoute2 = new javax.swing.JComboBox<>();
        jLabel18 = new javax.swing.JLabel();
        storeAddroute = new javax.swing.JComboBox<>();
        jLabel19 = new javax.swing.JLabel();
        distanceRoute = new javax.swing.JSpinner();
        sendInfoRoute = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        mainMenu = new javax.swing.JMenu();
        chargeFile = new javax.swing.JMenu();
        requestOption = new javax.swing.JMenu();
        showGraph = new javax.swing.JMenu();
        storesManage = new javax.swing.JMenu();

        jLabel7.setText("jLabel7");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Organized Chaos");
        setBackground(new java.awt.Color(0, 0, 0));
        setMinimumSize(new java.awt.Dimension(1312, 600));
        setPreferredSize(new java.awt.Dimension(1312, 601));

        logoPanel.setBackground(new java.awt.Color(0, 0, 0));
        logoPanel.setLayout(null);

        ParentPanel.setBackground(new java.awt.Color(0, 0, 0));
        ParentPanel.setLayout(new java.awt.CardLayout());

        LoadPanel.setBackground(new java.awt.Color(255, 255, 255));
        LoadPanel.setLayout(new java.awt.GridBagLayout());

        chooseButton.setBackground(new java.awt.Color(255, 204, 51));
        chooseButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        chooseButton.setForeground(new java.awt.Color(0, 0, 0));
        chooseButton.setText("Seleccionar archivo...");
        chooseButton.setPreferredSize(new java.awt.Dimension(190, 30));
        chooseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.ipadx = 244;
        gridBagConstraints.ipady = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(23, 180, 0, 180);
        LoadPanel.add(chooseButton, gridBagConstraints);

        tittle1.setFont(new java.awt.Font("Tekton Pro Ext", 0, 24)); // NOI18N
        tittle1.setForeground(new java.awt.Color(0, 0, 0));
        tittle1.setText("¡Bienvenidos al Sistema ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(100, 240, 0, 0);
        LoadPanel.add(tittle1, gridBagConstraints);

        loadButton.setBackground(new java.awt.Color(255, 204, 51));
        loadButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        loadButton.setForeground(new java.awt.Color(0, 0, 0));
        loadButton.setText("Cargar datos");
        loadButton.setEnabled(false);
        loadButton.setPreferredSize(new java.awt.Dimension(97, 30));
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.ipadx = 309;
        gridBagConstraints.ipady = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(14, 180, 121, 180);
        LoadPanel.add(loadButton, gridBagConstraints);

        tittle2.setFont(new java.awt.Font("Tekton Pro Ext", 1, 24)); // NOI18N
        tittle2.setForeground(new java.awt.Color(0, 0, 0));
        tittle2.setText("de Distribución de Amazon!");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.ipadx = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 220, 0, 0);
        LoadPanel.add(tittle2, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Seleccione el archivo con la información necesaria");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(30, 260, 0, 0);
        LoadPanel.add(jLabel1, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Cargue los datos para poder continuar");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = -1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(30, 300, 0, 0);
        LoadPanel.add(jLabel2, gridBagConstraints);

        ParentPanel.add(LoadPanel, "card2");

        optionsPanel.setBackground(new java.awt.Color(255, 255, 255));
        optionsPanel.setLayout(new java.awt.GridBagLayout());

        updateData.setBackground(new java.awt.Color(255, 204, 51));
        updateData.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        updateData.setForeground(new java.awt.Color(0, 0, 0));
        updateData.setText("Actualizar Datos");
        updateData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateDataActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.ipadx = 78;
        gridBagConstraints.ipady = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(100, 110, 51, 0);
        optionsPanel.add(updateData, gridBagConstraints);

        disponibilidadShow.setBackground(new java.awt.Color(255, 204, 51));
        disponibilidadShow.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        disponibilidadShow.setForeground(new java.awt.Color(0, 0, 0));
        disponibilidadShow.setText("Disponibilidad por Almacén");
        disponibilidadShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disponibilidadShowActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.ipady = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(130, 50, 0, 0);
        optionsPanel.add(disponibilidadShow, gridBagConstraints);

        addStore.setBackground(new java.awt.Color(255, 204, 51));
        addStore.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        addStore.setForeground(new java.awt.Color(0, 0, 0));
        addStore.setText("Agregar Almacén");
        addStore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addStoreActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 10;
        gridBagConstraints.ipadx = 62;
        gridBagConstraints.ipady = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(130, 60, 0, 30);
        optionsPanel.add(addStore, gridBagConstraints);

        pedidoBoton.setBackground(new java.awt.Color(255, 204, 51));
        pedidoBoton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        pedidoBoton.setForeground(new java.awt.Color(0, 0, 0));
        pedidoBoton.setText("Realizar Pedido");
        pedidoBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pedidoBotonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.ipadx = 75;
        gridBagConstraints.ipady = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(130, 60, 0, 0);
        optionsPanel.add(pedidoBoton, gridBagConstraints);

        addRouteButton.setBackground(new java.awt.Color(255, 204, 51));
        addRouteButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        addRouteButton.setForeground(new java.awt.Color(0, 0, 0));
        addRouteButton.setText("Agregar Camino");
        addRouteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRouteButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 78;
        gridBagConstraints.ipady = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(130, 180, 0, 0);
        optionsPanel.add(addRouteButton, gridBagConstraints);

        jButton8.setBackground(new java.awt.Color(255, 204, 51));
        jButton8.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton8.setForeground(new java.awt.Color(0, 0, 0));
        jButton8.setText("Gestionar Almacén");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.ipadx = 72;
        gridBagConstraints.ipady = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(130, 80, 0, 0);
        optionsPanel.add(jButton8, gridBagConstraints);

        jButton9.setBackground(new java.awt.Color(255, 204, 51));
        jButton9.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton9.setForeground(new java.awt.Color(0, 0, 0));
        jButton9.setText("Ver Almacenes");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 86;
        gridBagConstraints.ipady = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(100, 120, 51, 0);
        optionsPanel.add(jButton9, gridBagConstraints);

        ParentPanel.add(optionsPanel, "card3");

        disponibilidadPanel.setBackground(new java.awt.Color(255, 255, 255));
        disponibilidadPanel.setLayout(null);
        ParentPanel.add(disponibilidadPanel, "card4");

        pedidoPanel.setBackground(new java.awt.Color(255, 255, 255));
        pedidoPanel.setLayout(null);

        jLabel3.setFont(new java.awt.Font("Tekton Pro Ext", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("PRODUCTOS DISPONIBLES:");
        pedidoPanel.add(jLabel3);
        jLabel3.setBounds(170, 30, 220, 18);

        productosInput.setBackground(new java.awt.Color(255, 204, 51));
        productosInput.setColumns(20);
        productosInput.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        productosInput.setForeground(new java.awt.Color(0, 0, 0));
        productosInput.setRows(5);
        jScrollPane1.setViewportView(productosInput);

        pedidoPanel.add(jScrollPane1);
        jScrollPane1.setBounds(130, 50, 330, 485);

        JCStores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JCStoresActionPerformed(evt);
            }
        });
        pedidoPanel.add(JCStores);
        JCStores.setBounds(600, 160, 230, 30);

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Seleccione un almacén:");
        pedidoPanel.add(jLabel4);
        jLabel4.setBounds(650, 110, 140, 15);

        confirmRequest.setBackground(new java.awt.Color(255, 204, 51));
        confirmRequest.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        confirmRequest.setForeground(new java.awt.Color(0, 0, 0));
        confirmRequest.setText("Confirmar Pedido");
        confirmRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmRequestActionPerformed(evt);
            }
        });
        pedidoPanel.add(confirmRequest);
        confirmRequest.setBounds(990, 510, 220, 24);

        jLabel17.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(0, 0, 0));
        jLabel17.setText("Seleccione el producto a pedir e idique la cantidad");
        pedidoPanel.add(jLabel17);
        jLabel17.setBounds(580, 250, 290, 17);

        JCProducts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JCProductsActionPerformed(evt);
            }
        });
        pedidoPanel.add(JCProducts);
        JCProducts.setBounds(560, 310, 190, 30);
        pedidoPanel.add(JProductsAmount);
        JProductsAmount.setBounds(800, 310, 80, 30);

        addproduct.setBackground(new java.awt.Color(204, 204, 204));
        addproduct.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        addproduct.setForeground(new java.awt.Color(0, 0, 0));
        addproduct.setText("Agregar producto");
        addproduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addproductActionPerformed(evt);
            }
        });
        pedidoPanel.add(addproduct);
        addproduct.setBounds(650, 400, 170, 23);

        userList.setColumns(20);
        userList.setForeground(new java.awt.Color(0, 0, 0));
        userList.setRows(5);
        jScrollPane2.setViewportView(userList);

        pedidoPanel.add(jScrollPane2);
        jScrollPane2.setBounds(980, 80, 234, 410);

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Tu lista:");
        pedidoPanel.add(jLabel5);
        jLabel5.setBounds(990, 60, 80, 16);

        ParentPanel.add(pedidoPanel, "card5");

        addStorePanel.setBackground(new java.awt.Color(255, 255, 255));
        addStorePanel.setLayout(null);

        jLabel8.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setText("Conexión 1:");
        addStorePanel.add(jLabel8);
        jLabel8.setBounds(22, 134, 67, 17);

        jLabel9.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 0, 0));
        jLabel9.setText("Conexión 2:");
        addStorePanel.add(jLabel9);
        jLabel9.setBounds(22, 244, 67, 17);

        jLabel10.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 0, 0));
        jLabel10.setText("Más conexiones:");
        addStorePanel.add(jLabel10);
        jLabel10.setBounds(6, 363, 94, 17);

        jLabel11.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 0, 0));
        jLabel11.setText("Indique al menos dos conexiones con los almacenes existentes:");
        addStorePanel.add(jLabel11);
        jLabel11.setBounds(6, 78, 356, 17);

        nameStoreInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameStoreInputActionPerformed(evt);
            }
        });
        addStorePanel.add(nameStoreInput);
        nameStoreInput.setBounds(523, 35, 164, 22);

        jLabel12.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 0, 0));
        jLabel12.setText("Ingrese el nombre del almacén:");
        addStorePanel.add(jLabel12);
        jLabel12.setBounds(204, 38, 190, 17);
        addStorePanel.add(route3);
        route3.setBounds(620, 360, 90, 22);

        jLabel13.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(0, 0, 0));
        jLabel13.setText("Peso de la ruta 2");
        addStorePanel.add(jLabel13);
        jLabel13.setBounds(472, 244, 100, 17);

        jLabel14.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(0, 0, 0));
        jLabel14.setText("Peso de la ruta 1");
        addStorePanel.add(jLabel14);
        jLabel14.setBounds(472, 134, 100, 17);

        jLabel15.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(0, 0, 0));
        jLabel15.setText("Peso de la ruta ");
        addStorePanel.add(jLabel15);
        jLabel15.setBounds(472, 360, 100, 17);
        addStorePanel.add(jSpinner2);
        jSpinner2.setBounds(620, 130, 88, 22);
        addStorePanel.add(jSpinner3);
        jSpinner3.setBounds(620, 241, 88, 22);

        createStoreButton.setBackground(new java.awt.Color(255, 204, 51));
        createStoreButton.setFont(new java.awt.Font("Tekton Pro Ext", 0, 14)); // NOI18N
        createStoreButton.setForeground(new java.awt.Color(0, 0, 0));
        createStoreButton.setText("Crear almacén");
        createStoreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createStoreButtonActionPerformed(evt);
            }
        });
        addStorePanel.add(createStoreButton);
        createStoreButton.setBounds(359, 443, 240, 25);

        addConection.setBackground(new java.awt.Color(204, 204, 204));
        addConection.setForeground(new java.awt.Color(0, 0, 0));
        addConection.setText("Agregar más conexiones");
        addConection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addConectionActionPerformed(evt);
            }
        });
        addStorePanel.add(addConection);
        addConection.setBounds(780, 360, 160, 23);

        addStorePanel.add(JConectionStore);
        JConectionStore.setBounds(122, 131, 261, 22);

        addStorePanel.add(JConectionStore2);
        JConectionStore2.setBounds(122, 241, 270, 22);

        jLabel16.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(0, 0, 0));
        jLabel16.setText("Almacén");
        addStorePanel.add(jLabel16);
        jLabel16.setBounds(456, 38, 49, 17);

        addStorePanel.add(JConectionMore);
        JConectionMore.setBounds(120, 360, 270, 22);

        ParentPanel.add(addStorePanel, "addStorePanel");

        addRoute.setBackground(new java.awt.Color(255, 255, 255));
        addRoute.setLayout(null);

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Seleccione el almacén al que quiere agregarle la ruta");
        addRoute.add(jLabel6);
        jLabel6.setBounds(300, 100, 292, 17);

        addRoute.add(storeAddRoute2);
        storeAddRoute2.setBounds(310, 340, 260, 30);

        jLabel18.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(0, 0, 0));
        jLabel18.setText("Seleccione el almacén con el que quiere hacer la ruta:");
        addRoute.add(jLabel18);
        jLabel18.setBounds(300, 280, 310, 17);

        addRoute.add(storeAddroute);
        storeAddroute.setBounds(310, 170, 260, 30);

        jLabel19.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(0, 0, 0));
        jLabel19.setText("Indique el peso de la ruta a agregar");
        addRoute.add(jLabel19);
        jLabel19.setBounds(730, 190, 210, 17);
        addRoute.add(distanceRoute);
        distanceRoute.setBounds(760, 230, 130, 30);

        sendInfoRoute.setBackground(new java.awt.Color(255, 204, 51));
        sendInfoRoute.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        sendInfoRoute.setForeground(new java.awt.Color(0, 0, 0));
        sendInfoRoute.setText("Agregar ruta");
        sendInfoRoute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendInfoRouteActionPerformed(evt);
            }
        });
        addRoute.add(sendInfoRoute);
        sendInfoRoute.setBounds(730, 310, 210, 24);

        ParentPanel.add(addRoute, "card7");

        mainMenu.setText("Menu");
        mainMenu.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        mainMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainMenuActionPerformed(evt);
            }
        });
        jMenuBar1.add(mainMenu);

        chargeFile.setText("Archivo");
        jMenuBar1.add(chargeFile);

        requestOption.setText("Realizar Pedido");
        requestOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestOptionActionPerformed(evt);
            }
        });
        jMenuBar1.add(requestOption);

        showGraph.setText("Ver Almacén");
        jMenuBar1.add(showGraph);

        storesManage.setText("Gestionar Almacén");
        jMenuBar1.add(storesManage);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(logoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(ParentPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(logoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ParentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 501, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chooseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseButtonActionPerformed
        int result = fileChooser.showOpenDialog(this);
        if(result == JFileChooser.APPROVE_OPTION) {
            selectedFile = fileChooser.getSelectedFile();
            loadButton.setEnabled(true);
        }
    }//GEN-LAST:event_chooseButtonActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        if(selectedFile != null) {
            App.getInstance().loadFile(selectedFile);
        }
        ParentPanel.removeAll();
        ParentPanel.add(optionsPanel);
        ParentPanel.repaint();
        ParentPanel.revalidate();
    }//GEN-LAST:event_loadButtonActionPerformed

    private void disponibilidadShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disponibilidadShowActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_disponibilidadShowActionPerformed

    private void pedidoBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pedidoBotonActionPerformed
        ParentPanel.removeAll();
        ParentPanel.add(pedidoPanel);
        ParentPanel.repaint();
        ParentPanel.revalidate();
        String productText="";
        for(ListNode<Store> recorrer= graph.getStores().getFirst();recorrer!=null;recorrer=recorrer.getNext()){
            JCStores.addItem(recorrer.getValue().getName().toString());
            for(ListNode<Stock> getStock=recorrer.getValue().getStock().getFirst();getStock!=null;getStock=getStock.getNext()){
                productText=productText+"- "+getStock.getValue().getProduct()+": "+getStock.getValue().getAmount()+"\n";
                JCProducts.addItem(getStock.getValue().getProduct());
            }
        }
        productosInput.setText(productText); 
    }//GEN-LAST:event_pedidoBotonActionPerformed

    private void confirmRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmRequestActionPerformed
        String storeSelected = JCStores.getSelectedItem().toString();
        Store storeGet=null;
        for(ListNode<Store> recorrer= graph.getStores().getFirst();recorrer!=null;recorrer=recorrer.getNext()){
            if(storeSelected.equals(recorrer.getValue().getName())){
                storeGet=recorrer.getValue();
            }
        }
        
        for(int i = 0; i < products.length; i++) {
            Stock stock = storeGet.getStock().find(products[i]);
            if(stock==null){
                //codigo solicitar
            }else{
                stock.setAmount(stock.getAmount()-Integer.parseInt(JProductsAmount.getValue().toString()));
            }
        }
  
    }//GEN-LAST:event_confirmRequestActionPerformed

    private void JCStoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JCStoresActionPerformed
        
    }//GEN-LAST:event_JCStoresActionPerformed

    private void updateDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateDataActionPerformed
        try {
            Database.readDatabase(getDataFile());
            Database.writeDatabase(graph, getDataFile());
        } catch (IOException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_updateDataActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton8ActionPerformed

    private void mainMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainMenuActionPerformed
       
    }//GEN-LAST:event_mainMenuActionPerformed

    private void requestOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestOptionActionPerformed
       
    }//GEN-LAST:event_requestOptionActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void addStoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addStoreActionPerformed
        ParentPanel.removeAll();
        ParentPanel.add(addStorePanel);
        ParentPanel.repaint();
        ParentPanel.revalidate();
        for(ListNode<Store> recorrer= graph.getStores().getFirst();recorrer!=null;recorrer=recorrer.getNext()){
            JConectionStore.addItem(recorrer.getValue().getName());
            JConectionStore2.addItem(recorrer.getValue().getName());
            JConectionMore.addItem(recorrer.getValue().getName());
        }
        
    }//GEN-LAST:event_addStoreActionPerformed

    private void addConectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addConectionActionPerformed
        newRoutes=null;
        Store store1;
        Store store2;
        Store moreStore;
        for(ListNode<Store> recorrer= graph.getStores().getFirst();recorrer!=null;recorrer=recorrer.getNext()){
            if((JConectionStore.getSelectedItem()).equals(recorrer.getValue().getName())   && JConectionMore.getSelectedItem().equals(recorrer.getValue().getName())){
                store1=recorrer.getValue();
            }
            if(JConectionStore2.getSelectedItem().equals(recorrer.getValue().getName())){
                store2=recorrer.getValue();
            }
        }
        for(ListNode<Store> recorrer= graph.getStores().getFirst();recorrer!=null;recorrer=recorrer.getNext()){
            
        }
        
//        Route route1=new Route(JConectionStore.getSelectedItem(), WIDTH);
//        newRoutes.append();
        Integer valueInicial=0;
        route3.setValue(valueInicial);
        
    }//GEN-LAST:event_addConectionActionPerformed

    private void nameStoreInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameStoreInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameStoreInputActionPerformed

    private void createStoreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createStoreButtonActionPerformed
        
        try{
            String nameStore=nameStoreInput.getText();
            if((nameStore.toLowerCase()).contains("almacen")){
                JOptionPane.showMessageDialog(ParentPanel, "No incluya la palabra almacen");
            }else{
                
                
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(ParentPanel, "Error, verifique los datos ingresados!");
        }
    }//GEN-LAST:event_createStoreButtonActionPerformed

    private void addproductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addproductActionPerformed
        products=null;
        amountProducts=null;
        for (int i = 0; i < JCProducts.getItemCount(); i++) {
            String selectItem=JCProducts.getSelectedItem().toString();
            products[i]=selectItem; 
            amountProducts[i]=Integer.parseInt(JProductsAmount.getValue().toString());
        }
        for (int i = 0; i < products.length; i++) {
        userList.setText(products[i]);
        }
    }//GEN-LAST:event_addproductActionPerformed

    private void JCProductsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JCProductsActionPerformed
        String storeSelected = JCStores.getSelectedItem().toString();
        Store storeGet=null;
        for(ListNode<Store> recorrer= graph.getStores().getFirst();recorrer!=null;recorrer=recorrer.getNext()){
            if(storeSelected.equals(recorrer.getValue().getName())){
                storeGet=recorrer.getValue();
            }
        }
        Stock stock = storeGet.getStock().find(JCProducts.getSelectedItem().toString());
        int maxItem=stock.getAmount();
        SpinnerNumberModel modeloSpinner = new SpinnerNumberModel();
        modeloSpinner.setMaximum(maxItem);
        modeloSpinner.setMinimum(0);
        JProductsAmount.setModel(modeloSpinner);
    }//GEN-LAST:event_JCProductsActionPerformed

    private void addRouteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRouteButtonActionPerformed
        ParentPanel.removeAll();
        ParentPanel.add(addRoute);
        ParentPanel.repaint();
        ParentPanel.revalidate();
        for(ListNode<Store> recorrer= graph.getStores().getFirst();recorrer!=null;recorrer=recorrer.getNext()){
            storeAddRoute2.addItem(recorrer.getValue().getName().toString());
            storeAddroute.addItem(recorrer.getValue().getName().toString());
        }
    }//GEN-LAST:event_addRouteButtonActionPerformed

    private void sendInfoRouteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendInfoRouteActionPerformed
       try{
       String almacenA=storeAddroute.getSelectedItem().toString();
       String almacenB=storeAddRoute2.getSelectedItem().toString();
       int distance=Integer.parseInt(distanceRoute.getValue().toString());
       graph.createRoute(almacenA, almacenB, distance);
       JOptionPane.showMessageDialog(ParentPanel, "Ruta creada!");
       }catch(Exception e){
           JOptionPane.showMessageDialog(ParentPanel, "Error, verifique la distancia ingresada");
       }
    }//GEN-LAST:event_sendInfoRouteActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> JCProducts;
    private static javax.swing.JComboBox<String> JCStores;
    private javax.swing.JComboBox<String> JConectionMore;
    private javax.swing.JComboBox<String> JConectionStore;
    private javax.swing.JComboBox<String> JConectionStore2;
    private javax.swing.JSpinner JProductsAmount;
    private javax.swing.JPanel LoadPanel;
    private javax.swing.JPanel ParentPanel;
    private javax.swing.JButton addConection;
    private javax.swing.JPanel addRoute;
    private javax.swing.JButton addRouteButton;
    private javax.swing.JButton addStore;
    private javax.swing.JPanel addStorePanel;
    private javax.swing.JButton addproduct;
    private javax.swing.JMenu chargeFile;
    private javax.swing.JButton chooseButton;
    private javax.swing.JButton confirmRequest;
    private javax.swing.JButton createStoreButton;
    private javax.swing.JPanel disponibilidadPanel;
    private javax.swing.JButton disponibilidadShow;
    private javax.swing.JSpinner distanceRoute;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JSpinner jSpinner3;
    private javax.swing.JButton loadButton;
    private javax.swing.JPanel logoPanel;
    private javax.swing.JMenu mainMenu;
    private javax.swing.JTextField nameStoreInput;
    private javax.swing.JPanel optionsPanel;
    private javax.swing.JButton pedidoBoton;
    private javax.swing.JPanel pedidoPanel;
    private javax.swing.JTextArea productosInput;
    private javax.swing.JMenu requestOption;
    private javax.swing.JSpinner route3;
    private javax.swing.JButton sendInfoRoute;
    private javax.swing.JMenu showGraph;
    private javax.swing.JComboBox<String> storeAddRoute2;
    private javax.swing.JComboBox<String> storeAddroute;
    private javax.swing.JMenu storesManage;
    private javax.swing.JLabel tittle1;
    private javax.swing.JLabel tittle2;
    private javax.swing.JButton updateData;
    private javax.swing.JTextArea userList;
    // End of variables declaration//GEN-END:variables

    public static App instance;
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        try {
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            instance = new App();
            instance.setVisible(true);
        });
    }

    public static App getInstance() {
        return instance;
    }
}
