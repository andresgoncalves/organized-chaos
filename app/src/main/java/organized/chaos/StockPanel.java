package organized.chaos;

import javax.swing.DefaultListModel;
import javax.swing.ListModel;

/**
 * Panel de disponibilidad en inventario
 * @author Andres
 */
public class StockPanel extends javax.swing.JPanel {
    
    /**
     * Creates new form BuyPanel
     */
    public StockPanel() {
        initComponents();
    }
    
    /**
     * Actualiza las listas de inventario
     */
    public void updateStock() {
        ((DefaultListModel) bfsList.getModel()).clear();
        ((DefaultListModel) dfsList.getModel()).clear();
        updateStockBFS();
        updateStockDFS();
    }
    
    /**
     * Construye la lista de inventario utilizando el recorrido de anchura
     */
    public void updateStockBFS() {
        StoreList pending = new StoreList(), visited = new StoreList();
        pending.append(App.getInstance().getGraph().getStores().getFirst().getValue());

        for (ListNode<Store> storeNode = pending.getFirst(); storeNode != null; storeNode = storeNode.getNext()) {
            Store store = storeNode.getValue();
            addStore(store, bfsList.getModel());
            for (ListNode<Route> routeNode = store.getRoutes().getFirst(); routeNode != null; routeNode = routeNode.getNext()) {
                Route route = routeNode.getValue();
                if(!route.isBackwards() && visited.find(route.getStore().getName()) == null && pending.find(route.getStore().getName()) == null) {
                    pending.append(route.getStore());
                }
            }
            pending.remove(store.getName());
            visited.append(store);
        }
    }
    
    /**
     * Construye la lista de inventario utilizando el recorrido de profundiad
     */
    public void updateStockDFS() {
        updateStockDFS(App.getInstance().getGraph().getStores().getFirst().getValue(), new StoreList());
    }
    
    /**
     * Construye la lista de inventario utilizando el recorrido de profundiad de forma recursiva
     */
    private void updateStockDFS(Store store, StoreList visited) {
        visited.append(store);
        addStore(store, dfsList.getModel());
        for (ListNode<Route> routeNode = store.getRoutes().getFirst(); routeNode != null; routeNode = routeNode.getNext()) {
            Route route = routeNode.getValue();
            if(!route.isBackwards() && visited.find(route.getStore().getName()) == null) {
                updateStockDFS(route.getStore(), visited);
            }
        }
    }
    
    /**
     * Añade el inventario de una tienda a una lista
     */
    private void addStore(Store store, ListModel model) {
        ((DefaultListModel) model).addElement("Almacén %s".formatted(store.getName()));
        for (ListNode<Stock> stockNode = store.getStock().getFirst(); stockNode != null; stockNode = stockNode.getNext()) {
            Stock stock = stockNode.getValue();
            ((DefaultListModel) model).addElement(" - %s (%d)".formatted(stock.getProduct(), stock.getAmount()));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        bottomPanel = new javax.swing.JPanel();
        bottomFiller = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        buyButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        returnButton = new javax.swing.JButton();
        centerPanel = new javax.swing.JPanel();
        bfsLabel = new javax.swing.JLabel();
        dfsLabel = new javax.swing.JLabel();
        bfsScrollPane = new javax.swing.JScrollPane();
        bfsList = new javax.swing.JList<>();
        dfsScrollPane = new javax.swing.JScrollPane();
        dfsList = new javax.swing.JList<>();

        setLayout(new java.awt.BorderLayout());

        bottomPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20));
        bottomPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        bottomPanel.add(bottomFiller, gridBagConstraints);

        buyButton.setText("Realizar pedido");
        buyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        bottomPanel.add(buyButton, gridBagConstraints);

        editButton.setText("Actualizar inventario");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });
        bottomPanel.add(editButton, new java.awt.GridBagConstraints());

        returnButton.setText("Volver");
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        bottomPanel.add(returnButton, gridBagConstraints);

        add(bottomPanel, java.awt.BorderLayout.SOUTH);

        centerPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(40, 40, 20, 40));
        centerPanel.setLayout(new java.awt.GridBagLayout());

        bfsLabel.setText("Recorrido de Anchura:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 10, 20);
        centerPanel.add(bfsLabel, gridBagConstraints);

        dfsLabel.setText("Recorrido de Profundidad:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 10, 20);
        centerPanel.add(dfsLabel, gridBagConstraints);

        bfsList.setModel(new javax.swing.DefaultListModel());
        bfsScrollPane.setViewportView(bfsList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        centerPanel.add(bfsScrollPane, gridBagConstraints);

        dfsList.setModel(new javax.swing.DefaultListModel());
        dfsScrollPane.setViewportView(dfsList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        centerPanel.add(dfsScrollPane, gridBagConstraints);

        add(centerPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Muestra la pantalla de compra de productos
     * @param evt 
     */
    private void buyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyButtonActionPerformed
        App.getInstance().showBuyPanel();
    }//GEN-LAST:event_buyButtonActionPerformed
    
    /**
     * Vuelve a la pantalla de opciones
     * @param evt 
     */
    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButtonActionPerformed
        App.getInstance().showOptionsPanel();
    }//GEN-LAST:event_returnButtonActionPerformed

    /**
     * Muestra la pantalla de gestión de inventario
     * @param evt 
     */
    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        App.getInstance().showAddStorePanel();
    }//GEN-LAST:event_editButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bfsLabel;
    private javax.swing.JList<String> bfsList;
    private javax.swing.JScrollPane bfsScrollPane;
    private javax.swing.Box.Filler bottomFiller;
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JButton buyButton;
    private javax.swing.JPanel centerPanel;
    private javax.swing.JLabel dfsLabel;
    private javax.swing.JList<String> dfsList;
    private javax.swing.JScrollPane dfsScrollPane;
    private javax.swing.JButton editButton;
    private javax.swing.JButton returnButton;
    // End of variables declaration//GEN-END:variables
}
