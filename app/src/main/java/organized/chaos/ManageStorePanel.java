package organized.chaos;

import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author Andres
 */
public class ManageStorePanel extends javax.swing.JPanel {
    
    private Store store;
    private RouteList routes;
    private StockList stock;
    
    private RoutesTableModel routesTableModel = new RoutesTableModel();
    private StockTableModel stockTableModel = new StockTableModel();

    /**
     * Creates new form AddStorePanel
     */
    public ManageStorePanel() {
        initComponents();
        setStore(null);
    }

    public void setStore(Store store) {
        this.store = store;
        routes = new RouteList();
        stock = new StockList();
        if(store != null) {
            nameTextField.setText(store.getName());
            for(ListNode<Route> node = store.getRoutes().getFirst(); node != null; node = node.getNext()) {
                Route route = node.getValue();
                routes.append(new Route(route.getStore(), route.getDistance()));
            }
            for(ListNode<Stock> node = store.getStock().getFirst(); node != null; node = node.getNext()) {
                Stock product = node.getValue();
                stock.append(new Stock(product.getProduct(), product.getAmount()));
            }
            removeStoreButton.setEnabled(true);
        }
        else {
            nameTextField.setText("");
            removeStoreButton.setEnabled(false);
        }
        routesTableModel.fireTableDataChanged();
        stockTableModel.fireTableDataChanged();
        updateStatus();
    }

    public void updateStatus() {
        if(nameTextField.getText().isBlank()) {
            statusLabel.setText("Ingrese un nombre para el almacén");
            statusLabel.setVisible(true);
            saveButton.setEnabled(false);
            return;
        }
        int[] directedCount = routes.getDirectedCount();
        Store current = App.getInstance().getGraph().getStore(nameTextField.getText());
        if(current != null && current != store ) {
            statusLabel.setText("El almacén ya existe");
            statusLabel.setVisible(true);
            saveButton.setEnabled(false);
        }
        else if(directedCount[0] < 1 || directedCount[1] < 1) {
            statusLabel.setText("Agregue al menos una ruta de entrada y una de salida al almacén");
            statusLabel.setVisible(true);
            saveButton.setEnabled(false);
        }
        else {
            statusLabel.setVisible(false);
            saveButton.setEnabled(true);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        bottomPanel = new javax.swing.JPanel();
        bottomFiller = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        statusLabel = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        centerPanel = new javax.swing.JPanel();
        nameLabel = new javax.swing.JLabel();
        searchPanel = new javax.swing.JPanel();
        nameTextField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        storeButtonsPanel = new javax.swing.JPanel();
        storeFiller = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        createStoreButton = new javax.swing.JButton();
        removeStoreButton = new javax.swing.JButton();
        routesLabel = new javax.swing.JLabel();
        stockLabel = new javax.swing.JLabel();
        routesScrollPane = new javax.swing.JScrollPane();
        routesTable = new javax.swing.JTable();
        stockScrollPane = new javax.swing.JScrollPane();
        stockTable = new javax.swing.JTable();
        routeButtonsPanel = new javax.swing.JPanel();
        routeFiller = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        addRouteButton = new javax.swing.JButton();
        removeRouteButton = new javax.swing.JButton();
        stockButtonsPanel = new javax.swing.JPanel();
        stockFiller = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        addProductButton = new javax.swing.JButton();
        removeProductButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        bottomPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20));
        bottomPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        bottomPanel.add(bottomFiller, gridBagConstraints);

        statusLabel.setForeground(java.awt.Color.red);
        statusLabel.setText("Agrega al menos 2 rutas");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        bottomPanel.add(statusLabel, gridBagConstraints);

        saveButton.setText("Guardar");
        saveButton.setEnabled(false);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        bottomPanel.add(saveButton, gridBagConstraints);

        cancelButton.setText("Volver");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        bottomPanel.add(cancelButton, gridBagConstraints);

        add(bottomPanel, java.awt.BorderLayout.SOUTH);

        centerPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(40, 40, 20, 40));
        centerPanel.setLayout(new java.awt.GridBagLayout());

        nameLabel.setText("Nombre del Almacén: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 10, 20);
        centerPanel.add(nameLabel, gridBagConstraints);

        searchPanel.setLayout(new java.awt.GridBagLayout());

        nameTextField.setColumns(10);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        searchPanel.add(nameTextField, gridBagConstraints);

        searchButton.setText("Cargar");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        searchPanel.add(searchButton, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 20);
        centerPanel.add(searchPanel, gridBagConstraints);

        storeButtonsPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        storeButtonsPanel.add(storeFiller, gridBagConstraints);

        createStoreButton.setText("Nuevo almacén");
        createStoreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createStoreButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        storeButtonsPanel.add(createStoreButton, gridBagConstraints);

        removeStoreButton.setText("Eliminar almacén");
        removeStoreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeStoreButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        storeButtonsPanel.add(removeStoreButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        centerPanel.add(storeButtonsPanel, gridBagConstraints);

        routesLabel.setText("Rutas:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 10, 20);
        centerPanel.add(routesLabel, gridBagConstraints);

        stockLabel.setText("Productos:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 10, 20);
        centerPanel.add(stockLabel, gridBagConstraints);

        routesTable.setModel(routesTableModel);
        routesScrollPane.setViewportView(routesTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        centerPanel.add(routesScrollPane, gridBagConstraints);

        stockTable.setModel(stockTableModel);
        stockScrollPane.setViewportView(stockTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        centerPanel.add(stockScrollPane, gridBagConstraints);

        routeButtonsPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        routeButtonsPanel.add(routeFiller, gridBagConstraints);

        addRouteButton.setText("Agregar ruta");
        addRouteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRouteButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        routeButtonsPanel.add(addRouteButton, gridBagConstraints);

        removeRouteButton.setText("Eliminar ruta");
        removeRouteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeRouteButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        routeButtonsPanel.add(removeRouteButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        centerPanel.add(routeButtonsPanel, gridBagConstraints);

        stockButtonsPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        stockButtonsPanel.add(stockFiller, gridBagConstraints);

        addProductButton.setText("Agregar producto");
        addProductButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addProductButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        stockButtonsPanel.add(addProductButton, gridBagConstraints);

        removeProductButton.setText("Eliminar producto");
        removeProductButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeProductButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        stockButtonsPanel.add(removeProductButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        centerPanel.add(stockButtonsPanel, gridBagConstraints);

        add(centerPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void addRouteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRouteButtonActionPerformed
        int row = routes.getSize();
        routesTableModel.setValueAt("", row, 0);               
        routesTableModel.setValueAt(0, row, 1);
        routesTableModel.fireTableRowsInserted(row, row);
        routesTable.editCellAt(row, 0);
    }//GEN-LAST:event_addRouteButtonActionPerformed

    private void removeRouteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeRouteButtonActionPerformed
        int row = routesTable.getSelectedRow();
        if(row >= 0) {
            Route route = routes.at(row);
            if(routes.getDirectedCount()[route.isBackwards() ? 1 : 0] > 1 ||
                    route.getStore().getRoutes().getDirectedCount()[route.isBackwards() ? 0 : 1] > 1) {
                routes.removeAt(row);
                routesTableModel.fireTableRowsDeleted(row, row);
            }
            else {
                System.out.println(routes.getDirectedCount()[route.isBackwards() ? 1 : 0]);
                System.out.println(route.getStore().getRoutes().getDirectedCount()[route.isBackwards() ? 0 : 1]);
                JOptionPane.showMessageDialog(this, "La operación provocaría almacenes aislados.", "Operación abortada", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_removeRouteButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        App.getInstance().showOptionsPanel();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        StoreGraph graph = App.getInstance().getGraph();
        String name = nameTextField.getText();
        Store original = graph.getStore(name);
        if(original != null && original != store) {
            JOptionPane.showMessageDialog(this, "Ya existe un almacén con ese nombre", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if(store != null) {
            graph.removeStore(store.getName());
        }
        Store store = graph.createStore(name);
        for(ListNode<Route> node = routes.getFirst(); node != null; node = node.getNext()) {
            Route route = node.getValue();
            graph.setDistance(name, route.getStore().getName(), route.getDistance());
        }
        for(ListNode<Stock> node = stock.getFirst(); node != null; node = node.getNext()) {
            Stock product = node.getValue();
            store.getStock().append(new Stock(product.getProduct(), product.getAmount()));
        }
        App.getInstance().saveFile();
        JOptionPane.showMessageDialog(this, "Se guardaron los cambios", "Operación exitosa", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_saveButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        Store store = App.getInstance().getGraph().getStore(nameTextField.getText().toString().toUpperCase());
        if(store != null) {
            setStore(store);
        }
        else {
            JOptionPane.showMessageDialog(this, "No se encontró el almacén", "Error", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void createStoreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createStoreButtonActionPerformed
        setStore(null);
    }//GEN-LAST:event_createStoreButtonActionPerformed

    private void addProductButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addProductButtonActionPerformed
        int row = stock.getSize();
        stockTableModel.setValueAt("", row, 0);               
        stockTableModel.setValueAt(0, row, 1);
        stockTableModel.fireTableRowsInserted(row, row);
        stockTable.editCellAt(row, 0);
    }//GEN-LAST:event_addProductButtonActionPerformed

    private void removeProductButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeProductButtonActionPerformed
        int row = stockTable.getSelectedRow();
        if(row >= 0) {
            stock.removeAt(row);
            stockTableModel.fireTableRowsDeleted(row, row);
        }
    }//GEN-LAST:event_removeProductButtonActionPerformed

    private void removeStoreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeStoreButtonActionPerformed
        if(JOptionPane.showConfirmDialog(this, "¿Seguro que desea eliminar el Almacén %s?".formatted(store.getName()), "Confirmar eliminación", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.OK_OPTION) {
            for(ListNode<Route> node = routes.getFirst(); node != null; node = node.getNext()) {
                Route route = node.getValue();
                if(route.getStore().getRoutes().getDirectedCount()[route.isBackwards() ? 0 : 1] < 2) {
                    JOptionPane.showMessageDialog(this, "La operación provocaría almacenes aislados.", "Operación abortada", JOptionPane.WARNING_MESSAGE);
                    return;
                }
            }
            if(App.getInstance().getGraph().removeStore(store.getName()) != null) {
                App.getInstance().saveFile();
                JOptionPane.showMessageDialog(this, "Se eliminó el Almacén %s".formatted(store.getName()), "Operación exitosa", JOptionPane.INFORMATION_MESSAGE);
                setStore(null);
            }
            else {
                JOptionPane.showMessageDialog(this, "No se pudo eliminar el Almacén %s".formatted(store.getName()), "Error", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_removeStoreButtonActionPerformed

    class RoutesTableModel extends AbstractTableModel {

        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            if(aValue == null) {
                return;
            }
            boolean isNew = rowIndex >= routes.getSize();
            Route route = isNew ? new Route(App.getInstance().getGraph().getStores().at(0), 0) : routes.at(rowIndex);
            switch(columnIndex) {
                case 0: {
                    Store target = App.getInstance().getGraph().getStores().find(aValue);
                    if(target != null) {
                        route.setStore(target);
                    }
                    break;
                }
                case 1:
                    route.setDistance((int) aValue);
                    break;
                default: 
                    return;
            }
            if(isNew) {
                routes.append(route);
            }
            updateStatus();
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return true;
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            switch(columnIndex) {
                case 0:
                    return String.class;
                case 1:
                    return Integer.class;
            }
            return Object.class;
        }

        @Override
        public String getColumnName(int column) {
            switch(column) {
                case 0:
                    return "Almacén";
                case 1:
                    return "Distancia";
            }
            return "";
        }

        @Override
        public int getRowCount() {
            return routes.getSize();
        }

        @Override
        public int getColumnCount() {
            return 2;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            Route route = routes.at(rowIndex);
            switch(columnIndex) {
                case 0:
                    return route.getStore().getName();
                case 1:
                    return route.getDistance();
            }
            return null;
        }
    }
    
    class StockTableModel extends AbstractTableModel {

        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            if(aValue == null) {
                return;
            }
            boolean isNew = rowIndex >= stock.getSize();
            Stock product = isNew ? new Stock("", 0) : stock.at(rowIndex);
            switch(columnIndex) {
                case 0: {
                    product.setProduct((String) aValue);
                    break;
                }
                case 1:
                    product.setAmount((int) aValue);
                    break;
                default: 
                    return;
            }
            if(isNew) {
                stock.append(product);
            }
            updateStatus();
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return true;
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            switch(columnIndex) {
                case 0:
                    return String.class;
                case 1:
                    return Integer.class;
            }
            return Object.class;
        }

        @Override
        public String getColumnName(int column) {
            switch(column) {
                case 0:
                    return "Producto";
                case 1:
                    return "Cantidad";
            }
            return "";
        }

        @Override
        public int getRowCount() {
            return stock.getSize();
        }

        @Override
        public int getColumnCount() {
            return 2;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            Stock product = stock.at(rowIndex);
            switch(columnIndex) {
                case 0:
                    return product.getProduct();
                case 1:
                    return product.getAmount();
            }
            return null;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addProductButton;
    private javax.swing.JButton addRouteButton;
    private javax.swing.Box.Filler bottomFiller;
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel centerPanel;
    private javax.swing.JButton createStoreButton;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JButton removeProductButton;
    private javax.swing.JButton removeRouteButton;
    private javax.swing.JButton removeStoreButton;
    private javax.swing.JPanel routeButtonsPanel;
    private javax.swing.Box.Filler routeFiller;
    private javax.swing.JLabel routesLabel;
    private javax.swing.JScrollPane routesScrollPane;
    private javax.swing.JTable routesTable;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JPanel stockButtonsPanel;
    private javax.swing.Box.Filler stockFiller;
    private javax.swing.JLabel stockLabel;
    private javax.swing.JScrollPane stockScrollPane;
    private javax.swing.JTable stockTable;
    private javax.swing.JPanel storeButtonsPanel;
    private javax.swing.Box.Filler storeFiller;
    // End of variables declaration//GEN-END:variables
}
